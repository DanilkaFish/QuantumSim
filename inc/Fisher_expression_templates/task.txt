Шаблоны C++ нашли применение для отложенного вычисления выражений. Такая техника называется "шаблоны выражений" (expression templates, см. https://en.wikipedia.org/wiki/Expression_templates). Она наиболее популярна при создании библиотек для работы с матрицами, т.к., например, с её помощью можно избежать создания объектов, хранящих промежуточные результаты, или можно автоматически склеивать циклы при матричных операциях, что положительно сказывается на производительности. В частности expression templates повсеместно используются в матричной библиотеке Eigen (https://eigen.tuxfamily.org).

Вам предлагается разобраться с основами expression templates и написать учебную header-only библиотеку linalg, которая содержит реализацию класса Matrix с поддержкой операций сложения и транспонирования.

В качестве заготовки создана структура файлов и прототипы классов. Вам нужно написать реализацию.

Проект содежит следующие файлы:
- main.cpp - пример использования библиотеки.
- linalg.h - заголовочный файл для включения библиотеки.
- exception.h - определяет класс исключений. Используйте его при возникновении ошибок при проверке значений индексов у матриц.
- expression.h - определяет шаблонный класс "выражение" и операции, которые доступны для любого выражения. Используется CRTP: https://en.cppreference.com/w/cpp/language/crtp
- matrix.h - определяет класс "матрица", который непосредственно хранит данные.
- sum.h - определяет класс, соответствующий сумме двух выражений.
- transpose.h - определяет класс, соответствующий транспонированной матрице (выражению).